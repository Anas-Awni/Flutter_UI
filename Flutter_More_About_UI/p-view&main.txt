//basic page ui
import 'package:flutter/material.dart';
import 'main_splash_screen.dart';
import 'p_view.dart';
//import 'package:flutter_styled_toast/flutter_styled_toast.dart';
//import 'package:another_flushbar/flushbar.dart';
//import 'package:carousel_slider/carousel_slider.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  SharedPreferences prefs = await SharedPreferences.getInstance();
  bool? decision = prefs.getBool('x');
  Widget _screen =
      (decision == false || decision == null) ? PView() : MyHomePage();

  runApp(_screen);
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      themeMode: ThemeMode.system,
      theme: ThemeData(primarySwatch: Colors.blue, canvasColor: Colors.white),
      darkTheme:
          ThemeData(primaryColor: Colors.blue, canvasColor: Colors.amber),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final GlobalKey<ScaffoldState> _x = GlobalKey<ScaffoldState>();
  String str = 'Flutter Demo2';
  late int _currentIndex;
  List imgList = [
    'images/s1.jpg',
    'images/s2.jpg',
    'images/s3.jpg',
  ];

  int _radioValue = 0;
  late String result;
  late Color resultColor;

  bool js = false;
  bool cSharp = false;
  bool python = false;

  String get txt {
    String str = " You Selected:\n";
    if (js == true) str += "JavaScript\n";
    if (cSharp == true) str += "C#\n";
    if (python == true)
      str += "Python\n";
    else
      str += "None\n";

    return str;
  }

  ThemeMode tm = ThemeMode.light;
  bool _swVal = false;

  late String _selectedLetter;
  List _letterList = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      themeMode: ThemeMode.system,
      theme: ThemeData(primarySwatch: Colors.blue, canvasColor: Colors.white),
      darkTheme:
          ThemeData(primaryColor: Colors.blue, canvasColor: Colors.amber),
      home: Scaffold(
        key: _x,
        appBar: AppBar(
          leading: Padding(
              padding: const EdgeInsets.only(left: 1),
              child: Row(
                children: [
                  IconButton(
                      onPressed: () {}, icon: const Icon(Icons.account_circle)),
                  Expanded(
                    child: IconButton(
                        onPressed: () {},
                        icon: const Icon(Icons.account_circle)),
                  ),
                ],
              )),
          actions: [
            IconButton(
                onPressed: () {}, icon: const Icon(Icons.account_circle)),
            IconButton(
                onPressed: () {}, icon: const Icon(Icons.account_circle)),
          ],
          flexibleSpace: Container(
            decoration: const BoxDecoration(
                gradient: LinearGradient(colors: [
              Colors.deepPurpleAccent,
              Colors.pink,
              Colors.deepPurpleAccent,
            ])),
          ),
          centerTitle: true,
          title: const Text(
            'Flutter Demo',
            style: TextStyle(fontWeight: FontWeight.bold, color: Colors.amber),
          ),
        ),
        body: null,
      ),
    );
  }

  ListView buildExpansionTile() {
    return ListView(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 8),
          child: ExpansionTile(
            backgroundColor: Colors.amber,
            leading: Icon(Icons.perm_identity),
            title: Text("Account"),
            children: [
              Divider(color: Colors.grey),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.add),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Sign Up!"),
                  subtitle: Text("Where you can Register An Account "),
                  onTap: buildSnackBar,
                ),
              ),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.account_circle),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Sign In!"),
                  subtitle: Text("Where you can Login Your Account "),
                  onTap: buildSnackBar,
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 10),
        Padding(
          padding: const EdgeInsets.only(top: 8),
          child: ExpansionTile(
            backgroundColor: Colors.amber,
            leading: Icon(Icons.message),
            title: Text("More Info"),
            children: [
              Divider(color: Colors.grey),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.phone),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Contact Us!"),
                  subtitle: Text("Where you can call Us "),
                  onTap: buildSnackBar,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  void buildSnackBar() {
    final sBar = SnackBar(
      action: SnackBarAction(
        textColor: Colors.black,
        label: "Undo!",
        onPressed: () {},
      ),
      content: Text("Snack Bar Text"),
      duration: Duration(seconds: 8),
      backgroundColor: Colors.red,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
    );
    _x.currentState!.showSnackBar(sBar);
  }

  Center buildDropdownButton() {
    return Center(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Text('Select a Letter!'),
          const SizedBox(width: 10),
          DropdownButton(
            hint: const Text('A!!!'),
            value: _selectedLetter,
            items: _letterList.map((item) {
              return DropdownMenuItem(
                child: Text(item),
                value: item,
              );
            }).toList(),
            onChanged: (newVal) {
              setState(() {
                _selectedLetter = newVal.toString();
              });
            },
          ),
        ],
      ),
    );
  }

  Center buildSwitch() {
    return Center(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Padding(
            padding: const EdgeInsets.all(40),
            child: Text("Light"),
          ),
          Switch(
            value: _swVal,
            onChanged: (bool value) {
              setState(() {
                _swVal = value;
                if (_swVal == false)
                  tm = ThemeMode.light;
                else
                  tm = ThemeMode.dark;
              });
            },
            activeColor: Colors.black,
            inactiveThumbColor: Colors.blue,
          ),
          Padding(
            padding: const EdgeInsets.all(40),
            child: Text("Dark"),
          ),
        ],
      ),
    );
  }

  Padding buildCheckbox(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(18.0),
      child: Column(
        children: [
          Text("Select any Programming Languages You Know"),
          Row(
            children: [
              Checkbox(
                value: js,
                onChanged: (value) {
                  setState(() {
                    js = value!;
                  });
                },
              ),
              Text("JS"),
            ],
          ),
          CheckboxListTile(
            value: cSharp,
            controlAffinity: ListTileControlAffinity.leading,
            onChanged: (value) {
              setState(() {
                cSharp = value!;
              });
            },
            title: Text("C#"),
          ),
          Row(
            children: [
              Checkbox(
                value: python,
                onChanged: (value) {
                  setState(() {
                    python = value!;
                  });
                },
              ),
              Text("Python"),
            ],
          ),
          RaisedButton(
              child: Text("Apply"),
              onPressed: () {
                var ad = AlertDialog(
                  title: Text("Thanks You For Applying!"),
                  content: Text(txt),
                );
                showDialog(context: context, builder: (x) => ad);
              })
          //showDialog(context: context, builder: (x) => ad); best sd
        ],
      ),
    );
  }

  RadioListTile buildRadioListTile(val, txt, subtxt) {
    return RadioListTile(
      value: val,
      groupValue: _radioValue,
      controlAffinity: ListTileControlAffinity.leading,
      onChanged: (value) {
        setState(() {
          _radioValue = value;
        });
      },
      title: Text(txt),
      subtitle: Text(
        subtxt,
        style: TextStyle(color: Colors.white),
      ),
    );
  }
}


/*
import 'dart:async';
//import 'package:flutter_page_view_indicator/flutter_page_view_indicator.dart';
//import 'package:page_view_indicator/page_view_indicator.dart';
//import 'package:page_view_dot_indicator/page_view_dot_indicator.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:flutter/material.dart';
import 'main.dart';
import 'main_splash_screen.dart';

class Data {
  final String title;
  final String description;
  final String imageUrl;
  final IconData iconData;

  Data({
    required this.title,
    required this.description,
    required this.imageUrl,
    required this.iconData,
  });
}

class PView extends StatefulWidget {
  const PView({Key? key}) : super(key: key);

  @override
  State<PView> createState() => _PViewState();
}

class _PViewState extends State<PView> {
  final PageController _controller = PageController(
    initialPage: 0,
  );
  int _currentIndex = 0;
  // final _pageIndexNotifier = ValueNotifier<int>(0);

  final List<Data> myData = [
    Data(
      title: "Page 1 ",
      description: "you are in page #1",
      imageUrl: "images/q1.jpg",
      iconData: Icons.add_location,
    ),
    Data(
      title: "Page 2 ",
      description: "you are in page #2",
      imageUrl: "images/q2.jpg",
      iconData: Icons.add_circle,
    ),
    Data(
      title: "Page 3 ",
      description: "you are in page #3",
      imageUrl: "images/q3.jpg",
      iconData: Icons.add_task,
    ),
    Data(
        title: "Page 4 ",
        description: "you are in page #4",
        imageUrl: "images/q4.jpg",
        iconData: Icons.add_reaction),
  ];

  @override
  void initState() {
    super.initState();
    Timer.periodic(Duration(seconds: 6), (timer) {
      if (_currentIndex < 3) _currentIndex++;

      _controller.animateToPage(
        _currentIndex,
        duration: Duration(milliseconds: 300),
        curve: Curves.easeIn,
      );
    });
  }

  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      routes: {
        '/a': (ctx) => MyHomePage(),
        '/b': (ctx) => MainSplashScreen(),
      },
      home: Scaffold(
        body: Stack(
          alignment: Alignment(0, 0.7),
          children: [
            Builder(
              builder: (ctx) => PageView(
                controller: _controller,
                children: myData
                    .map((item) => Container(
                          decoration: BoxDecoration(
                            image: DecorationImage(
                              image: ExactAssetImage(item.imageUrl),
                              fit: BoxFit.cover,
                            ),
                          ),
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(item.iconData, size: 130),
                              SizedBox(height: 50),
                              Text(item.title,
                                  style: TextStyle(
                                      color: Colors.black,
                                      fontWeight: FontWeight.bold,
                                      fontSize: 35)),
                              SizedBox(height: 10),
                              Text(
                                item.description,
                                style: TextStyle(
                                    color: Colors.white,
                                    fontWeight: FontWeight.bold,
                                    fontSize: 35),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        ))
                    .toList(),
                onPageChanged: (val) {
                  // _pageIndexNotifier.value = val;
                  setState(() {
                    _currentIndex = val;
                    /*  if (_currentIndex == 3) {
                      Future.delayed(Duration(seconds: 2),
                          () => Navigator.of(ctx).pushNamed('/b'));
                    }*/
                  });
                },
              ),
            ),
            /*
            PageViewDotIndicator(
              currentItem: _pageIndexNotifer.value,
              count:myData.length ,
              unselectedColor:Colors.black,
              selectedColor:Colors.blue,
              duration: const Duration(milliseconds:200),
              padding:EdgeInsert.zero,
              alignment:Alignment.bottomCenter,

            ),
            */
            Indicator(_currentIndex),
            /* PageViewIndicator(
              pageIndexNotifier: _pageIndexNotifier,
              length: myData.length,
              normalBuilder: (animationController, index) => Circle(
                size: 8.0,
                color: Colors.white,
              ),
              highlightedBuilder: (animationController, index) =>
                  ScaleTransition(
                scale: CurvedAnimation(
                  parent: animationController,
                  curve: Curves.ease,
                ),
                child: Icon(Icons.star),
              ),
            ),*/
            Builder(
              builder: (ctx) => Align(
                alignment: Alignment(0, 0.93),
                child: Container(
                  width: double.infinity,
                  margin: EdgeInsets.symmetric(horizontal: 10),
                  child: RaisedButton(
                    padding: EdgeInsets.all(7),
                    color: Colors.red,
                    child: Text(
                      "Get Started",
                      style: TextStyle(color: Colors.white, fontSize: 25),
                    ),
                    onPressed: () async {
                      Navigator.of(ctx).pushNamed('/b');
                      SharedPreferences prefs =
                          await SharedPreferences.getInstance();
                      prefs.setBool('x', true);
                    },
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class Indicator extends StatelessWidget {
  final int index;
  Indicator(this.index);
  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: Alignment(0, 0.7),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          buildContainer(0, index == 0 ? Colors.green : Colors.red),
          buildContainer(1, index == 1 ? Colors.green : Colors.red),
          buildContainer(2, index == 2 ? Colors.green : Colors.red),
          buildContainer(3, index == 3 ? Colors.green : Colors.red),
        ],
      ),
    );
  }

  Widget buildContainer(int i, Color color) {
    return index == i
        ? Icon(Icons.star)
        : Container(
            margin: EdgeInsets.all(4),
            height: 15,
            width: 15,
            decoration: BoxDecoration(
              color: Colors.white,
              shape: BoxShape.circle,
            ),
          );
  }
}



*/