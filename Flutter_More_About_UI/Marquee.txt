//basic page ui
import 'package:flutter/material.dart';
import 'package:carousel_slider/carousel_slider.dart';
import 'package:marquee/marquee.dart';

void main() => runApp(MyHomePage());

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      themeMode: ThemeMode.system,
      theme: ThemeData(primarySwatch: Colors.blue, canvasColor: Colors.white),
      darkTheme:
          ThemeData(primaryColor: Colors.blue, canvasColor: Colors.black),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final GlobalKey<ScaffoldState> _x = GlobalKey<ScaffoldState>();
  String str = 'Flutter Demo';
  List imgList = [
    'images/s1.jpg',
    'images/s2.jpg',
    'images/s3.jpg',
  ];
  int _radioValue = 0;
  late String result;
  late Color resultColor;
  bool js = false;
  bool cSharp = false;
  bool python = false;

  String get txt {
    String str = " You Selected:\n";
    if (js == true) str += "JavaScript\n";
    if (cSharp == true) str += "C#\n";
    if (python == true)
      str += "Python\n";
    else
      str += "None\n";

    return str;
  }

  ThemeMode tm = ThemeMode.light;
  bool _swVal = false;

  String? _selectedLetter;
  List _letterList = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      themeMode: tm,
      theme: ThemeData(primarySwatch: Colors.blue, canvasColor: Colors.white),
      darkTheme: ThemeData(primaryColor: Colors.blue, canvasColor: Colors.pink),
      home: Scaffold(
          key: _x,
          appBar: AppBar(
            title: Text('Flutter Demo '),
          ),
          body: ListView(
            children: <Widget>[
              SizedBox(height: 15),
              SizedBox(
                height: 70,
                child: Card(
                  color: Colors.teal,
                  child: Marquee(
                    text: "Simple Marque",
                    blankSpace: 200,
                    scrollAxis: Axis.horizontal,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    // pauseAfterRound: Duration(seconds: 1),
                    accelerationDuration: Duration(microseconds: 500),
                  ),
                ),
              ),
              SizedBox(height: 15),
              SizedBox(
                height: 70,
                child: Card(
                  color: Colors.teal,
                  child: Marquee(
                    text: "Simple Marque",
                    blankSpace: 50,
                    scrollAxis: Axis.vertical,
                    crossAxisAlignment: CrossAxisAlignment.start,
//pauseAfterRound: Duration(seconds: 2),
                    accelerationDuration: Duration(microseconds: 50),
                  ),
                ),
              )
            ],
          )),
    );
  }

  ListView buildExpansionTile() {
    return ListView(
      children: [
        Padding(
          padding: const EdgeInsets.only(top: 8),
          child: ExpansionTile(
            backgroundColor: Colors.amber,
            leading: Icon(Icons.perm_identity),
            title: Text("Account"),
            children: [
              Divider(color: Colors.grey),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.add),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Sign Up!"),
                  subtitle: Text("Where you can Register An Account "),
                  onTap: buildSnackBar,
                ),
              ),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.account_circle),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Sign In!"),
                  subtitle: Text("Where you can Login Your Account "),
                  onTap: buildSnackBar,
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 10),
        Padding(
          padding: const EdgeInsets.only(top: 8),
          child: ExpansionTile(
            backgroundColor: Colors.amber,
            leading: Icon(Icons.message),
            title: Text("More Info"),
            children: [
              Divider(color: Colors.grey),
              Card(
                color: Colors.teal,
                child: ListTile(
                  leading: Icon(Icons.phone),
                  trailing: Icon(Icons.arrow_forward_ios),
                  title: Text("Contact Us!"),
                  subtitle: Text("Where you can call Us "),
                  onTap: buildSnackBar,
                ),
              ),
            ],
          ),
        )
      ],
    );
  }

  void buildSnackBar() {
    final sBar = SnackBar(
      action: SnackBarAction(
        textColor: Colors.black,
        label: "Undo!",
        onPressed: () {},
      ),
      content: Text("Snack Bar Text"),
      duration: Duration(seconds: 8),
      backgroundColor: Colors.red,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
    );
    _x.currentState!.showSnackBar(sBar);
  }

  Center buildDropdownButton() {
    return Center(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Text('Select a Letter!'),
          const SizedBox(width: 10),
          DropdownButton(
            hint: const Text('A!!!'),
            value: _selectedLetter,
            items: _letterList.map((item) {
              return DropdownMenuItem(
                child: Text(item),
                value: item,
              );
            }).toList(),
            onChanged: (newVal) {
              setState(() {
                _selectedLetter = newVal.toString();
              });
            },
          ),
        ],
      ),
    );
  }

  Center buildSwitch() {
    return Center(
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Padding(
            padding: const EdgeInsets.all(40),
            child: Text("Light"),
          ),
          Switch(
            value: _swVal,
            onChanged: (bool value) {
              setState(() {
                _swVal = value;
                if (_swVal == false)
                  tm = ThemeMode.light;
                else
                  tm = ThemeMode.dark;
              });
            },
            activeColor: Colors.black,
            inactiveThumbColor: Colors.blue,
          ),
          Padding(
            padding: const EdgeInsets.all(40),
            child: Text("Dark"),
          ),
        ],
      ),
    );
  }

  Padding buildCheckbox(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(18.0),
      child: Column(
        children: [
          Text("Select any Programming Languages You Know"),
          Row(
            children: [
              Checkbox(
                value: js,
                onChanged: (value) {
                  setState(() {
                    js = value!;
                  });
                },
              ),
              Text("JS"),
            ],
          ),
          CheckboxListTile(
            value: cSharp,
            controlAffinity: ListTileControlAffinity.leading,
            onChanged: (value) {
              setState(() {
                cSharp = value!;
              });
            },
            title: Text("C#"),
          ),
          Row(
            children: [
              Checkbox(
                value: python,
                onChanged: (value) {
                  setState(() {
                    python = value!;
                  });
                },
              ),
              Text("Python"),
            ],
          ),
          RaisedButton(
              child: Text("Apply"),
              onPressed: () {
                var ad = AlertDialog(
                  title: Text("Thanks You For Applying!"),
                  content: Text(txt),
                );
                showDialog(context: context, builder: (x) => ad);
              })
          //showDialog(context: context, builder: (x) => ad); best sd
        ],
      ),
    );
  }

  RadioListTile buildRadioListTile(val, txt, subtxt) {
    return RadioListTile(
      value: val,
      groupValue: _radioValue,
      controlAffinity: ListTileControlAffinity.leading,
      onChanged: (value) {
        setState(() {
          _radioValue = value;
        });
      },
      title: Text(txt),
      subtitle: Text(
        subtxt,
        style: TextStyle(color: Colors.white),
      ),
    );
  }
}
